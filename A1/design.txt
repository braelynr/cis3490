Braelyn Rotman
1006740
CIS*3490
Assignment 2

Part 1

**Inversion By Brute Force
    Pseudocode:
      for(i = 0 ; i < n ; i++)
        for(j = i+1 ; j < n ; j++)
          if(array[i] > array[j])    // basic operation
            inversions++;

    Average Run Time: 6000 milliseconds
    Basic Operations ~~ 1,250,000,000 = n^1.9 = n^2
    Efficiency Class: O(n^2)

  **Inversion By Merge Sort
      Pseudocode:
        mergesort(array):
            if n > 1
              B = array[0...n/2-1]
              C = array[n/2...n-1]
              mergesort(B)
              mergesort(C)
              merge(B, C, A)

        merge(B, C, A):     // p = length(B) q = length(C)
            while (i < p and j < q){
              if (B[i] <= C[j])
                A[k] <- B[i]
                i++
              else
                A[k] <- C[j]
                j++
            }
            if (i = p)
              add rest of C to A
            else
              add rest of B to A

      Average Run Time: 10 milliseconds
      Basic Operations ~~ 50000 = n
      Efficiency Class: O(nlog(n))
        Master Theorm:
          C(n) = 2C(n/2) + n/2
          f(n) = n/2 belongs to O(n^1)
          a = 2, b = 2, d = 1
          b^d = 2 = a
          C(n) belongs to O((n^d)log(n)) = O(nlog(n))

  Comparison:
    Using a modified mergesort algorithm is much more efficient than
    using brute force. Brute force averages around 6-7 seconds while
    the mergesort algorithm completes in only a fraction of a second.

    Brute force completes in O(n^2) time because it must compare each
    element to every single other element. This results in moving linearly
    through an array n times for each element in a set of size n.

    Merge sort completes in O(nlog(n)) because it first recursively splits
    the array in half in O(n) time and then counts the inversions when merging
    the arrays back together

------------------------------------------------------------
Part 2

  **Convex-Hull By Brute Force
      Pseudocode:
        for(i = 0 ; i < n ; i++)
          for(j = i + 1 ; j < n ; j++)
            for (k = 0 ; k < n ; k++)
              if k != i && k != j // dont compare line end points
                if all of k is on the same side as line ij // basic operation
                  add i and j to the hull
                else
                  do nothing
        sort by x

      Average Run Time: 1 hour...
      Efficiency Class: O(n^3)

  **Convex-Hull By Quick Sort
      Pseudocode:
        "main":
              if (n < 3)
                add all points to hull
                exit

              find p1 (leftmost x value) and p2 (rightmost x value)
    recurse
            {
              max = find farthest point from line p1p2
                if no more points
                  add line ends to hull
                  return
              set p2 to farthest point from line p1max
              recurse;
              set p1 to farthest point from line p2max
              recurse;
            }
              repeat for other side of line p1p2

              sort by x

      Average Run Time: 50 milliseconds // This time was taken from a student with a fully functional program
      Efficiency Class: O(nlog(n))
        Master Theorm: (for average/best case)
          C(n) = 2C(n/2) + n for n > 1  C(1) = 0
          f(n) = n/2 belongs to O(n^1)
          a = 2, b = 2, d = 1
          b^d = 2 = a
          C(n) belongs to O((n^d)log(n)) = O(nlog(n))

    Comparison:
      Similar to the merge sort from 1.2, using a divide and conquer
      algorithm is much more efficient than using brute force. Brute
      force will always take at least a few minutes while the divide
      and conquer algorithm again, completes in only a fraction of a second.

      Brute force completes in O(n^3) time because it take every pair of
      element and compare them to every single other element. To move through
      every single pair of elements requires moving through the linear array n
      times for each element. This results in O(n^2 time). Each pair of points
      forms a line which must be compared to each point again in O(n) time.
      Doing these together results in O(n*n^2) = O(n^3).

      The modified quicksort completes in O(nlog(n)). This algorithm works by
      creating partitions recursively to effectively find outer points. Each point
      is compared to each partition in O(n) time rather than comparing each point
      to every other pair of points.

      While brute force completes very quickly in a small data set such as n < 10.
      It is much better to implement the quicksort, especially when using a data set
      of size 30000.
